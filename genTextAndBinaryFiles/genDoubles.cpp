/* genDoubles.cpp generates N random binary double numbers
 * and writes them to two files: one binary, one text.
 *
 * @author Joel Adams, for CS 374 at Calvin University.
 *
 * Usage: ./generate <N> <fileName>
 *
 * The program will generate two files:
 *   <fileName>.bin (binary format) and 
 *   <fileName>.txt (text format).
 */

#include <iostream>    // cout, cerr, fixed, showpoint, ...
#include <iomanip>     // setprecision
#include <fstream>     // ofstream, ifstream, ...
#include <vector>      // vector
#include <cassert>     // assert
#include <random>      // random_device, ...
#include <cstdlib>     // exit
using namespace std;

typedef double Item;

vector<Item> generateData(unsigned numItems, Item lo, Item hi);

int main(int argc, char** argv) {
    const Item LOW = 0.0;
    const Item HIGH = 1.0;

    if (argc != 3) {
	cerr << "\nUsage: ./generate <N> <fileName>\n\n";
	exit(1);
    }

    unsigned numItems = atoi( argv[1] );
    unsigned numBytes = numItems * sizeof(Item);
    string txtFileName = string(argv[2]) + ".txt";

    ofstream fout(txtFileName.c_str());
    assert( fout.is_open() );

    vector<Item> data = generateData(numItems, LOW, HIGH);
    cout << "\nNumbers generated:\n";
    for (unsigned i = 0; i < data.size(); ++i) {
	    cout << fixed << setprecision(15) << data[i] << '\n';
	    fout << fixed << setprecision(15) << data[i] << '\n';
    }
    fout.close();

    string binFileName = string(argv[2]) + ".bin";
    fstream outFile = std::fstream(binFileName.c_str(),
		                std::ios::out | std::ios::binary);
    outFile.write((char*)(&(data[0])), numBytes);
    outFile.close();
    cout << '\n' << data.size() << " numbers from range " 
	 << LOW << " to " << HIGH 
         << " written to '" 
         << binFileName << "' (binary) and '"
         << txtFileName << "' (txt).\n" << endl;
}

/* utility to generate a vector of pseudo-random numbers
 * @param: numDoubles, the number of desired numbers
 * @param: lo, the bottom of the range from which the numbers are selected
 * @param: hi, the top of the range from which the numbers are selected
 * PRE: numDoubles > 0 && lo < hi
 * @return: a vector of size numDoubles, containing pseudo-random numbers
 *           from the range lo..hi.
 */
vector<double> generateData(unsigned numDoubles, double lo, double hi)
{
    vector<double> data(numDoubles);
    random_device rd;  //Will be used to obtain a seed for the random number engine
    mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    uniform_real_distribution<> dis(lo, hi);
    for (unsigned i = 0; i < numDoubles; ++i) {
        // Use dis to transform the random unsigned int generated by gen into a
        // double in [0.0..1.0). Each call to dis(gen) generates a new random double
        data[i] = dis(gen);
    }
    return data;
}
